import java.awt.*;
import java.awt.event.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.text.*;

public class ToDoForm extends JDialog {
	// UI ÌÖåÎßà ÏÉâÏÉÅ
	private static final Color PRIMARY_COLOR = new Color(64, 128, 255);
	private static final Color SECONDARY_COLOR = new Color(248, 249, 250);
	private static final Color ACCENT_COLOR = new Color(255, 99, 71);
	private static final Color SUCCESS_COLOR = new Color(40, 167, 69);
	private static final Color TEXT_COLOR = new Color(33, 37, 41);
	private static final Color BORDER_COLOR = new Color(206, 212, 218);
	private static final Color SHARED_COLOR = new Color(255, 193, 7);

	private int year;
	private int month;
	private int day;
	private ToDo todo;
	private SharedToDo sharedTodo; // Í≥µÏú† ÏùºÏ†ï Ï†ïÎ≥¥ Î≥¥Í¥Ä
	private boolean editMode = false;
	OurCalendar baseCal;
	JTextField titleField = new JTextField();
	JTextField locationField = new JTextField();
	JCheckBox checkBox = new JCheckBox();
	JCheckBox shareCheckBox = new JCheckBox(); // Í≥µÏú† ÏùºÏ†ï Ï≤¥ÌÅ¨Î∞ïÏä§ Ï∂îÍ∞Ä
	JComboBox<String> alarmCombo;
	JComboBox<String> repeatCombo;
	JTextArea memoArea;

	private JLabel startYearLabel, startMonthLabel, startDayLabel, startHourLabel, startMinuteLabel;
	private JLabel endYearLabel, endMonthLabel, endDayLabel, endHourLabel, endMinuteLabel;

	ToDoForm(int year, int month, int day, OurCalendar baseCal) {
		this.year = year;
		this.month = month;
		this.day = day;
		this.baseCal = baseCal;
		this.editMode = true;
	}

	// Î™®Îçò Î≤ÑÌäº ÏÉùÏÑ±
	private JButton createStyledButton(String text, Color bgColor) {
		JButton button = new JButton(text);
		button.setBackground(bgColor);
		button.setForeground(Color.WHITE);
		button.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 14));
		button.setBorder(BorderFactory.createEmptyBorder(12, 24, 12, 24));
		button.setFocusPainted(false);
		button.setCursor(new Cursor(Cursor.HAND_CURSOR));
		button.setOpaque(true);
		button.setContentAreaFilled(true);

		// Ìò∏Î≤Ñ Ìö®Í≥º
		button.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				button.setBackground(bgColor.darker());
			}

			@Override
			public void mouseExited(MouseEvent e) {
				button.setBackground(bgColor);
			}
		});

		return button;
	}

	// Ïä§ÌÉÄÏùºÎßÅÎêú ÌÖçÏä§Ìä∏ ÌïÑÎìú ÏÉùÏÑ±
	private JTextField createStyledTextField(String placeholder) {
		JTextField field = new JTextField();
		field.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 14));
		field.setBorder(BorderFactory.createCompoundBorder(
				BorderFactory.createLineBorder(BORDER_COLOR, 1),
				BorderFactory.createEmptyBorder(10, 12, 10, 12)));
		applyPlaceholder(field, placeholder);
		return field;
	}

	// ÏûÖÎ†•ÌïòÍ∏∞ Ï†ÑÏóêÎäî ÌöåÏÉâ Í∏ÄÏûêÎ°ú ÌÉÄÏù¥ÌãÄ -> ÏûÖÎ†• ÏãúÏûëÌïòÎ©¥ ÏßÄÏõåÏßê
	public void applyPlaceholder(JTextComponent field, String placeholderText) {
		field.setText(placeholderText);
		field.setForeground(Color.GRAY);

		field.addFocusListener(new FocusAdapter() {
			@Override
			public void focusGained(FocusEvent e) {
				if (field.getText().equals(placeholderText)) {
					field.setText("");
					field.setForeground(TEXT_COLOR);
				}
			}

			@Override
			public void focusLost(FocusEvent e) {
				if (field.getText().isEmpty()) {
					field.setForeground(Color.GRAY);
					field.setText(placeholderText);
				}
			}
		});
	}

	// ÎìúÎ°≠Îã§Ïö¥ ÏÑ§Ï†ï
	public JLabel createCustomDropdown(String[] options, String initialValue) {
		JLabel dropdown = new JLabel(initialValue);
		dropdown.setOpaque(true);
		dropdown.setBackground(Color.WHITE);
		dropdown.setForeground(TEXT_COLOR);
		dropdown.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 13));
		dropdown.setBorder(BorderFactory.createCompoundBorder(
				BorderFactory.createLineBorder(BORDER_COLOR, 1),
				BorderFactory.createEmptyBorder(6, 10, 6, 10)));
		dropdown.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

		JList<String> list = new JList<>(options);
		list.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 13));
		JScrollPane scrollPane = new JScrollPane(list);
		scrollPane.setPreferredSize(new Dimension(120, Math.min(25 * options.length, 120)));

		JPopupMenu popup = new JPopupMenu();
		popup.setLayout(new BorderLayout());
		popup.add(scrollPane, BorderLayout.CENTER);

		list.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) {
				String selected = list.getSelectedValue();
				if (selected != null) {
					dropdown.setText(selected);
					popup.setVisible(false);
				}
			}
		});

		dropdown.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) {
				popup.show(dropdown, 0, dropdown.getHeight());
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				dropdown.setBackground(SECONDARY_COLOR);
			}

			@Override
			public void mouseExited(MouseEvent e) {
				dropdown.setBackground(Color.WHITE);
			}
		});

		return dropdown;
	}

	// ÏÉà ÏùºÏ†ï Ï∂îÍ∞Ä UI
	void showList() {
		setTitle("üìÖ ÏùºÏ†ï Í¥ÄÎ¶¨");
		setSize(400, 700);
		setLocationRelativeTo(null);
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		getContentPane().setBackground(Color.WHITE);

		// Ï†ÑÏ≤¥ Î†àÏù¥ÏïÑÏõÉ
		JPanel mainPanel = new JPanel();
		mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
		mainPanel.setBorder(new EmptyBorder(20, 25, 20, 25));
		mainPanel.setBackground(Color.WHITE);

		// Ìó§Îçî
		JPanel headerPanel = new JPanel(new BorderLayout());
		headerPanel.setBackground(Color.WHITE);

		String titleText = "ÏÉà ÏùºÏ†ï Ï∂îÍ∞Ä";
		if (editMode && todo != null) {
			if (sharedTodo != null) {
				titleText = "Í≥µÏú† ÏùºÏ†ï ÏàòÏ†ï";
			} else {
				titleText = "ÏùºÏ†ï ÏàòÏ†ï";
			}
		}

		JLabel titleLabel = new JLabel(titleText);
		titleLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 20));
		titleLabel.setForeground(TEXT_COLOR);
		headerPanel.add(titleLabel, BorderLayout.WEST);
		mainPanel.add(headerPanel);
		mainPanel.add(Box.createVerticalStrut(20));

		// Ï†úÎ™© ÏûÖÎ†•
		titleField = createStyledTextField("ÏùºÏ†ï Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî");
		titleField.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 16));
		mainPanel.add(titleField);
		mainPanel.add(Box.createVerticalStrut(15));

		// Ïû•ÏÜå ÏûÖÎ†•
		locationField = createStyledTextField("Ïû•ÏÜå (ÏÑ†ÌÉùÏÇ¨Ìï≠)");
		mainPanel.add(locationField);
		mainPanel.add(Box.createVerticalStrut(20));

		// Íµ¨Î∂ÑÏÑ†
		JSeparator separator = new JSeparator();
		separator.setForeground(BORDER_COLOR);
		mainPanel.add(separator);
		mainPanel.add(Box.createVerticalStrut(20));

		// ÌïòÎ£®Ï¢ÖÏùº Ï≤¥ÌÅ¨Î∞ïÏä§
		JPanel checkPanel = new JPanel(new BorderLayout());
		checkPanel.setBackground(Color.WHITE);
		JLabel allDayLabel = new JLabel("ÌïòÎ£®Ï¢ÖÏùº");
		allDayLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 14));
		checkBox.setBackground(Color.WHITE);
		checkPanel.add(allDayLabel, BorderLayout.WEST);
		checkPanel.add(checkBox, BorderLayout.EAST);
		mainPanel.add(checkPanel);
		mainPanel.add(Box.createVerticalStrut(10));

		// Í≥µÏú† ÏùºÏ†ï Ï≤¥ÌÅ¨Î∞ïÏä§ Ï∂îÍ∞Ä
		JPanel sharePanel = new JPanel(new BorderLayout());
		sharePanel.setBackground(Color.WHITE);

		String shareLabelText = "üåê Í≥µÏú† ÏùºÏ†ï";
		if (editMode && todo != null && sharedTodo == null) {
			// Í∏∞Ï°¥ Î°úÏª¨ ÏùºÏ†ï ÏàòÏ†ï Ïãú Î≥ÄÌôò Í∞ÄÎä• ÌëúÏãú
			shareLabelText = "üåê Í≥µÏú† ÏùºÏ†ïÏúºÎ°ú Î≥ÄÌôò";
		}

		JLabel shareLabel = new JLabel(shareLabelText);
		shareLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 14));
		shareLabel.setForeground(SHARED_COLOR.darker());
		shareCheckBox.setBackground(Color.WHITE);

		// ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÏÉÅÌÉúÏóê Îî∞Îùº ÌôúÏÑ±Ìôî/ÎπÑÌôúÏÑ±Ìôî
		if (baseCal.getClient() == null || !baseCal.getClient().isConnected()) {
			shareCheckBox.setEnabled(false);
			shareLabel.setText(shareLabelText + " (Ïò§ÌîÑÎùºÏù∏)");
			shareLabel.setForeground(Color.GRAY);
		}

		// Í∏∞Ï°¥ Í≥µÏú† ÏùºÏ†ï ÏàòÏ†ï ÏãúÏóêÎäî ÌäπÎ≥Ñ Ï≤òÎ¶¨
		if (sharedTodo != null) {
			shareCheckBox.setSelected(true);
			shareCheckBox.setEnabled(true); // ÌôúÏÑ±ÌôîÌïòÏó¨ Í≥µÏú† Ìï¥Ï†ú Í∞ÄÎä•
			shareLabel.setText("üåê Í≥µÏú† ÏùºÏ†ï (Ï≤¥ÌÅ¨ Ìï¥Ï†ú Ïãú Í∞úÏù∏ ÏùºÏ†ïÏúºÎ°ú Î≥ÄÌôò)");
		}

		sharePanel.add(shareLabel, BorderLayout.WEST);
		sharePanel.add(shareCheckBox, BorderLayout.EAST);
		mainPanel.add(sharePanel);
		mainPanel.add(Box.createVerticalStrut(15));

		// ÏãúÍ∞Ñ ÏÑ§Ï†ï Ìå®ÎÑê
		JPanel timePanel = createTimePanel();
		mainPanel.add(timePanel);
		mainPanel.add(Box.createVerticalStrut(20));

		// Íµ¨Î∂ÑÏÑ†
		JSeparator separator2 = new JSeparator();
		separator2.setForeground(BORDER_COLOR);
		mainPanel.add(separator2);
		mainPanel.add(Box.createVerticalStrut(15));

		// ÏïåÎ¶º Î∞è Î∞òÎ≥µ ÏÑ§Ï†ï
		JPanel optionsPanel = createOptionsPanel();
		mainPanel.add(optionsPanel);
		mainPanel.add(Box.createVerticalStrut(15));

		// Î©îÎ™®
		JLabel memoLabel = new JLabel("Î©îÎ™®");
		memoLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 14));
		memoLabel.setForeground(TEXT_COLOR);
		mainPanel.add(memoLabel);
		mainPanel.add(Box.createVerticalStrut(8));

		memoArea = new JTextArea(4, 30);
		memoArea.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 14));
		memoArea.setBorder(BorderFactory.createCompoundBorder(
				BorderFactory.createLineBorder(BORDER_COLOR, 1),
				BorderFactory.createEmptyBorder(10, 12, 10, 12)));
		applyPlaceholder(memoArea, "Î©îÎ™®Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (ÏÑ†ÌÉùÏÇ¨Ìï≠)");

		JScrollPane memoScroll = new JScrollPane(memoArea);
		memoScroll.setBorder(null);
		mainPanel.add(memoScroll);
		mainPanel.add(Box.createVerticalStrut(25));

		// Î≤ÑÌäº Ìå®ÎÑê
		JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
		buttonPanel.setBackground(Color.WHITE);

		JButton cancelBtn = createStyledButton("Ï∑®ÏÜå", new Color(108, 117, 125));
		JButton saveBtn = createStyledButton("Ï†ÄÏû•", SUCCESS_COLOR);

		cancelBtn.addActionListener(e -> dispose());
		saveBtn.addActionListener(e -> {
			String date = OurCalendar.getDateKey(year, month, day);
			ToDo newData = getToDo();

			// Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ï∂îÍ∞Ä (Ï¢ÖÎ£åÏãúÍ∞ÑÏù¥ ÏãúÏûëÏãúÍ∞ÑÎ≥¥Îã§ ÏïûÏÑúÎäî Í≤ΩÏö∞)
			LocalDateTime startTime = LocalDateTime.of(
					newData.getStartYear(),
					newData.getStartMonth(),
					newData.getStartDay(),
					newData.getStartHour(),
					newData.getStartMinute());

			LocalDateTime endTime = LocalDateTime.of(
					newData.getEndYear(),
					newData.getEndMonth(),
					newData.getEndDay(),
					newData.getEndHour(),
					newData.getEndMinute());

			if (endTime.isBefore(startTime)) {
				JOptionPane.showMessageDialog(this,
						"ÏãúÏûë ÎÇ†ÏßúÎäî Ï¢ÖÎ£å ÎÇ†Ïßú Ïù¥Ï†ÑÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.",
						"ÏãúÍ∞Ñ Ïò§Î•ò",
						JOptionPane.ERROR_MESSAGE);
				return; // Ï†ÄÏû• Ï§ëÎã®
			}

			if (editMode && todo != null) {
				// Í∏∞Ï°¥ Í∞ùÏ≤¥ ÏàòÏ†ï
				if (sharedTodo != null) {
					// Í≥µÏú† ÏùºÏ†ï ÏàòÏ†ï
					if (shareCheckBox.isSelected()) {
						// Ïó¨Ï†ÑÌûà Í≥µÏú† ÏùºÏ†ïÏúºÎ°ú Ïú†ÏßÄ
						updateSharedTodo(newData);
					} else {
						// Í≥µÏú† ÏùºÏ†ïÏùÑ Í∞úÏù∏ ÏùºÏ†ïÏúºÎ°ú Î≥ÄÌôò
						System.out.println("Í≥µÏú† ÏùºÏ†ïÏùÑ Í∞úÏù∏ ÏùºÏ†ïÏúºÎ°ú Î≥ÄÌôò ÏãúÏûë: " + newData.getTaskName());

						// ÏÑúÎ≤ÑÏóêÏÑú Í≥µÏú† ÏùºÏ†ï ÏÇ≠Ï†ú
						baseCal.deleteSharedTask(sharedTodo.getId());

						// Î°úÏª¨ Í≥µÏú† ÏùºÏ†ïÏóêÏÑúÎèÑ ÏÇ≠Ï†ú
						baseCal.deleteSharedTodo(sharedTodo.getId());

						// Í∞úÏù∏ ÏùºÏ†ïÏúºÎ°ú Ï∂îÍ∞Ä
						baseCal.tasks.computeIfAbsent(date, k -> new ArrayList<>()).add(newData);

						JOptionPane.showMessageDialog(this,
								"Í≥µÏú† ÏùºÏ†ïÏù¥ Í∞úÏù∏ ÏùºÏ†ïÏúºÎ°ú Î≥ÄÌôòÎêòÏóàÏäµÎãàÎã§.\nÎã§Î•∏ ÏÇ¨Ïö©ÏûêÎì§ÏóêÍ≤åÎäî ÏÇ≠Ï†úÎê©ÎãàÎã§.",
								"Í∞úÏù∏ ÏùºÏ†ï Î≥ÄÌôò",
								JOptionPane.INFORMATION_MESSAGE);
					}
				} else {
					// Î°úÏª¨ ÏùºÏ†ï ÏàòÏ†ï
					updateExistingTodo(newData);

					// Í≥µÏú† ÏùºÏ†ïÏúºÎ°ú Î≥ÄÌôò Ï≤¥ÌÅ¨
					if (shareCheckBox.isSelected() && baseCal.getClient() != null
							&& baseCal.getClient().isConnected()) {
						System.out.println("Î°úÏª¨ ÏùºÏ†ïÏùÑ Í≥µÏú† ÏùºÏ†ïÏúºÎ°ú Î≥ÄÌôò ÏãúÏûë: " + newData.getTaskName());

						// Í∏∞Ï°¥ Î°úÏª¨ ÏùºÏ†ïÏùÑ Î¶¨Ïä§Ìä∏ÏóêÏÑú Ï†úÍ±∞
						List<ToDo> localTodos = baseCal.tasks.get(date);
						if (localTodos != null && localTodos.contains(todo)) {
							localTodos.remove(todo);
							System.out.println("Î°úÏª¨ ÏùºÏ†ï ÏÇ≠Ï†ú ÏôÑÎ£å");
						}

						// Í≥µÏú† ÏùºÏ†ïÏúºÎ°ú ÏÉùÏÑ± (newData ÏÇ¨Ïö©)
						baseCal.shareTask(newData);
						System.out.println("Í≥µÏú† ÏùºÏ†ï ÏÉùÏÑ± ÏôÑÎ£å");

						JOptionPane.showMessageDialog(this,
								"Î°úÏª¨ ÏùºÏ†ïÏù¥ Í≥µÏú† ÏùºÏ†ïÏúºÎ°ú Î≥ÄÌôòÎêòÏñ¥ Îã§Î•∏ ÏÇ¨Ïö©ÏûêÎì§Í≥º Í≥µÏú†ÎêòÏóàÏäµÎãàÎã§!",
								"Í≥µÏú† ÏùºÏ†ï Î≥ÄÌôò",
								JOptionPane.INFORMATION_MESSAGE);
					}
				}
			} else {
				// ÏÉàÎ°ú Ï∂îÍ∞Ä
				if (shareCheckBox.isSelected() && baseCal.getClient() != null && baseCal.getClient().isConnected()) {
					// Í≥µÏú† ÏùºÏ†ïÏúºÎ°úÎßå ÏÉùÏÑ± (Î°úÏª¨ ÏùºÏ†ïÏùÄ ÏÉùÏÑ±ÌïòÏßÄ ÏïäÏùå)
					System.out.println("ÏÉà Í≥µÏú† ÏùºÏ†ï ÏÉùÏÑ±: " + newData.getTaskName());
					baseCal.shareTask(newData);

					JOptionPane.showMessageDialog(this,
							"ÏùºÏ†ïÏù¥ Îã§Î•∏ ÏÇ¨Ïö©ÏûêÎì§Í≥º Í≥µÏú†ÎêòÏóàÏäµÎãàÎã§!",
							"Í≥µÏú† ÏôÑÎ£å",
							JOptionPane.INFORMATION_MESSAGE);
				} else {
					// Î°úÏª¨ ÏùºÏ†ïÏúºÎ°úÎßå ÏÉùÏÑ±
					System.out.println("ÏÉà Î°úÏª¨ ÏùºÏ†ï ÏÉùÏÑ±: " + newData.getTaskName());
					baseCal.tasks.computeIfAbsent(date, k -> new ArrayList<>()).add(newData);

					if (shareCheckBox.isSelected()) {
						JOptionPane.showMessageDialog(this,
								"ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïÑ Î°úÏª¨ ÏùºÏ†ïÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.",
								"Ïò§ÌîÑÎùºÏù∏ Î™®Îìú",
								JOptionPane.WARNING_MESSAGE);
					}
				}
			}

			// Îã¨Î†• ÏóÖÎç∞Ïù¥Ìä∏
			baseCal.updateCal(false);
			dispose();
		});

		buttonPanel.add(cancelBtn);
		buttonPanel.add(saveBtn);
		mainPanel.add(buttonPanel);

		add(mainPanel);

		// ÏàòÏ†ïÌï† Îïå Ïù¥ÎØ∏ ÏûÖÎ†•Îêú ÌïÑÎìú Ï±ÑÏõÄ
		if (todo != null) {
			populateFields(todo);
		}

		setVisible(true);
	}

	// ÏãúÍ∞Ñ ÏÑ§Ï†ï Ìå®ÎÑê ÏÉùÏÑ±
	private JPanel createTimePanel() {
		JPanel timePanel = new JPanel();
		timePanel.setLayout(new BoxLayout(timePanel, BoxLayout.Y_AXIS));
		timePanel.setBackground(Color.WHITE);

		// ÏãúÏûë ÏãúÍ∞Ñ
		JPanel startPanel = new JPanel(new BorderLayout());
		startPanel.setBackground(Color.WHITE);
		JLabel startLabel = new JLabel("ÏãúÏûë");
		startLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 14));
		startPanel.add(startLabel, BorderLayout.WEST);

		JPanel start = new JPanel(new FlowLayout(FlowLayout.RIGHT, 5, 0));
		start.setBackground(Color.WHITE);
		startYearLabel = createCustomDropdown(makeYearList(), year + "ÎÖÑ");
		startMonthLabel = createCustomDropdown(makeMonthList(), (month + 1) + "Ïõî");
		startDayLabel = createCustomDropdown(makeDayList(), day + "Ïùº");
		startHourLabel = createCustomDropdown(makeHourList(), "0Ïãú");
		startMinuteLabel = createCustomDropdown(makeMinuteList(), "0Î∂Ñ");

		start.add(startYearLabel);
		start.add(startMonthLabel);
		start.add(startDayLabel);
		start.add(startHourLabel);
		start.add(startMinuteLabel);

		startPanel.add(start, BorderLayout.EAST);
		timePanel.add(startPanel);
		timePanel.add(Box.createVerticalStrut(10));

		// Ï¢ÖÎ£å ÏãúÍ∞Ñ
		JPanel finishPanel = new JPanel(new BorderLayout());
		finishPanel.setBackground(Color.WHITE);
		JLabel finishLabel = new JLabel("Ï¢ÖÎ£å");
		finishLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 14));
		finishPanel.add(finishLabel, BorderLayout.WEST);

		JPanel end = new JPanel(new FlowLayout(FlowLayout.RIGHT, 5, 0));
		end.setBackground(Color.WHITE);
		endYearLabel = createCustomDropdown(makeYearList(), year + "ÎÖÑ");
		endMonthLabel = createCustomDropdown(makeMonthList(), (month + 1) + "Ïõî");
		endDayLabel = createCustomDropdown(makeDayList(), day + "Ïùº");
		endHourLabel = createCustomDropdown(makeHourList(), "1Ïãú");
		endMinuteLabel = createCustomDropdown(makeMinuteList(), "0Î∂Ñ");

		end.add(endYearLabel);
		end.add(endMonthLabel);
		end.add(endDayLabel);
		end.add(endHourLabel);
		end.add(endMinuteLabel);

		finishPanel.add(end, BorderLayout.EAST);
		timePanel.add(finishPanel);

		return timePanel;
	}

	// ÏòµÏÖò Ìå®ÎÑê ÏÉùÏÑ± (ÏïåÎ¶º, Î∞òÎ≥µ)
	private JPanel createOptionsPanel() {
		JPanel optionsPanel = new JPanel();
		optionsPanel.setLayout(new BoxLayout(optionsPanel, BoxLayout.Y_AXIS));
		optionsPanel.setBackground(Color.WHITE);

		// ÏïåÎ¶º ÏÑ§Ï†ï
		alarmCombo = new JComboBox<>(new String[] {
				"ÏóÜÏùå", "10Î∂Ñ Ï†Ñ", "30Î∂Ñ Ï†Ñ", "1ÏãúÍ∞Ñ Ï†Ñ", "ÌïòÎ£® Ï†Ñ"
		});
		alarmCombo.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 14));

		JPanel alarmPanel = new JPanel(new BorderLayout());
		alarmPanel.setBackground(Color.WHITE);
		JLabel alarmLabel = new JLabel("ÏïåÎ¶º");
		alarmLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 14));
		alarmPanel.add(alarmLabel, BorderLayout.WEST);
		alarmPanel.add(alarmCombo, BorderLayout.EAST);
		optionsPanel.add(alarmPanel);
		optionsPanel.add(Box.createVerticalStrut(10));

		// Î∞òÎ≥µ ÏùºÏ†ï
		repeatCombo = new JComboBox<>(new String[] {
				"ÏóÜÏùå", "Îß§Ïùº", "Îß§Ï£º", "Îß§Îã¨", "Îß§ÎÖÑ"
		});
		repeatCombo.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 14));

		JPanel repeatPanel = new JPanel(new BorderLayout());
		repeatPanel.setBackground(Color.WHITE);
		JLabel repeatLabel = new JLabel("Î∞òÎ≥µ");
		repeatLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 14));
		repeatPanel.add(repeatLabel, BorderLayout.WEST);
		repeatPanel.add(repeatCombo, BorderLayout.EAST);
		optionsPanel.add(repeatPanel);

		return optionsPanel;
	}

	// Í∏∞Ï°¥ Ìï†Ïùº ÏóÖÎç∞Ïù¥Ìä∏
	private void updateExistingTodo(ToDo newData) {
		todo.setTaskName(newData.getTaskName());
		todo.setLocation(newData.getLocation());
		todo.setAllDay(newData.isAllDay());
		todo.setStartYear(newData.getStartYear());
		todo.setStartMonth(newData.getStartMonth());
		todo.setStartDay(newData.getStartDay());
		todo.setStartHour(newData.getStartHour());
		todo.setStartMinute(newData.getStartMinute());
		todo.setEndYear(newData.getEndYear());
		todo.setEndMonth(newData.getEndMonth());
		todo.setEndDay(newData.getEndDay());
		todo.setEndHour(newData.getEndHour());
		todo.setEndMinute(newData.getEndMinute());
		todo.setAlarm(newData.getAlarm());
		todo.setRepeat(newData.getRepeat());
		todo.setMemo(newData.getMemo());
	}

	// Í≥µÏú† ÏùºÏ†ï ÏóÖÎç∞Ïù¥Ìä∏
	private void updateSharedTodo(ToDo newData) {
		if (sharedTodo == null) {
			System.err.println("Ïò§Î•ò: sharedTodoÍ∞Ä nullÏûÖÎãàÎã§!");
			return;
		}

		System.out.println("Í≥µÏú† ÏùºÏ†ï ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë - ID: " + sharedTodo.getId() + ", Ï†úÎ™©: " + newData.getTaskName());

		// Í∏∞Ï°¥ SharedToDo ÏóÖÎç∞Ïù¥Ìä∏
		sharedTodo.setTaskName(newData.getTaskName());
		sharedTodo.setLocation(newData.getLocation());
		sharedTodo.setAllDay(newData.isAllDay());
		sharedTodo.setStartYear(newData.getStartYear());
		sharedTodo.setStartMonth(newData.getStartMonth());
		sharedTodo.setStartDay(newData.getStartDay());
		sharedTodo.setStartHour(newData.getStartHour());
		sharedTodo.setStartMinute(newData.getStartMinute());
		sharedTodo.setEndYear(newData.getEndYear());
		sharedTodo.setEndMonth(newData.getEndMonth());
		sharedTodo.setEndDay(newData.getEndDay());
		sharedTodo.setEndHour(newData.getEndHour());
		sharedTodo.setEndMinute(newData.getEndMinute());
		sharedTodo.setAlarm(newData.getAlarm());
		sharedTodo.setRepeat(newData.getRepeat());
		sharedTodo.setMemo(newData.getMemo());

		System.out.println("Í≥µÏú† ÏùºÏ†ï ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å - ÏÑúÎ≤Ñ Ï†ÑÏÜ°: " + sharedTodo.toNetworkString());

		// Î°úÏª¨ÏóêÏÑú Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏
		baseCal.updateSharedTodo(sharedTodo);

		// ÏÑúÎ≤ÑÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ Ï†ÑÏÜ°
		baseCal.updateSharedTask(sharedTodo);

		JOptionPane.showMessageDialog(this,
				"Í≥µÏú† ÏùºÏ†ïÏù¥ ÏàòÏ†ïÎêòÏñ¥ Îã§Î•∏ ÏÇ¨Ïö©ÏûêÎì§ÏóêÍ≤å Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§!",
				"Í≥µÏú† ÏùºÏ†ï ÏóÖÎç∞Ïù¥Ìä∏",
				JOptionPane.INFORMATION_MESSAGE);
	}

	// ÏûÖÎ†•Ìïú Í∞íÎì§ Î∞õÏïÑÏò¥
	public ToDo getToDo() {
		String title = titleField.getText().trim();
		String location = locationField.getText().trim();
		boolean isAllDay = checkBox.isSelected();
		int sy = Integer.parseInt(startYearLabel.getText().replace("ÎÖÑ", ""));
		int sm = Integer.parseInt(startMonthLabel.getText().replace("Ïõî", "")) - 1;
		int sd = Integer.parseInt(startDayLabel.getText().replace("Ïùº", ""));
		int sh = Integer.parseInt(startHourLabel.getText().replace("Ïãú", ""));
		int smin = Integer.parseInt(startMinuteLabel.getText().replace("Î∂Ñ", ""));
		int ey = Integer.parseInt(endYearLabel.getText().replace("ÎÖÑ", ""));
		int em = Integer.parseInt(endMonthLabel.getText().replace("Ïõî", "")) - 1;
		int ed = Integer.parseInt(endDayLabel.getText().replace("Ïùº", ""));
		int eh = Integer.parseInt(endHourLabel.getText().replace("Ïãú", ""));
		int emin = Integer.parseInt(endMinuteLabel.getText().replace("Î∂Ñ", ""));
		String alarm = alarmCombo.getSelectedItem().toString();
		String repeat = repeatCombo.getSelectedItem().toString();
		String memo = memoArea.getText().trim();

		return new ToDo(title, location, isAllDay, sy, sm, sd, sh, smin, ey, em, ed, eh, emin, alarm, repeat, memo);
	}

	// Ìï¥Ïâ¨ÎßµÏóê ÏùºÏ†ï Ï∂îÍ∞Ä
	public void addToDo(String date, ToDo todo) {
		baseCal.tasks.computeIfAbsent(date, k -> new ArrayList<>()).add(todo);
		System.out.println(date + " ÏùºÏ†ï Ï∂îÍ∞ÄÎê®");
	}

	// ÎìúÎ°≠Îã§Ïö¥Ïóê Îì§Ïñ¥Í∞à Î¶¨Ïä§Ìä∏Îì§
	private String[] makeYearList() {
		String[] years = new String[100];
		for (int i = 0; i < 100; i++) {
			years[i] = (i + 2000) + "ÎÖÑ";
		}
		return years;
	}

	private String[] makeMonthList() {
		String[] months = new String[12];
		for (int i = 0; i < 12; i++) {
			months[i] = (i + 1) + "Ïõî";
		}
		return months;
	}

	private String[] makeDayList() {
		String[] days = new String[31];
		for (int i = 0; i < baseCal.getLastDay(); i++) {
			days[i] = (i + 1) + "Ïùº";
		}
		return days;
	}

	private String[] makeHourList() {
		String[] hours = new String[24];
		for (int i = 0; i < 24; i++) {
			hours[i] = i + "Ïãú";
		}
		return hours;
	}

	private String[] makeMinuteList() {
		String[] minutes = new String[60];
		for (int i = 0; i < 60; i++) {
			minutes[i] = i + "Î∂Ñ";
		}
		return minutes;
	}

	public ToDo getTodo() {
		return todo;
	}

	public void setTodo(ToDo todo) {
		this.todo = todo;
	}

	public void setSharedTodo(SharedToDo sharedTodo) {
		this.sharedTodo = sharedTodo;
	}

	// ÏàòÏ†ïÏö© ÏÉùÏÑ±Ïûê
	public ToDoForm(int year, int month, int day, OurCalendar baseCal, ToDo existingToDo) {
		this(year, month, day, baseCal);
		this.todo = existingToDo;
	}

	// Ï∂îÍ∞ÄÎêòÏñ¥ ÏûàÎäî ÏùºÏ†ï Î™©Î°ù UI - ÏàòÏ†ï, ÏÇ≠Ï†ú Í∏∞Îä• Ìè¨Ìï® (Î°úÏª¨ + Í≥µÏú† ÏùºÏ†ï)
	public static void showDialogWithList(JFrame parent, String dateKey, List<ToDo> localList) {
		// Í≥µÏú† ÏùºÏ†ïÎèÑ Ìï®Íªò ÌëúÏãú
		OurCalendar calendar = (OurCalendar) parent;
		List<SharedToDo> sharedList = calendar.sharedTasks.get(dateKey);

		showDialogWithBothLists(parent, dateKey, localList, sharedList);
	}

	// Î°úÏª¨ + Í≥µÏú† ÏùºÏ†ïÏùÑ Î™®Îëê ÌëúÏãúÌïòÎäî Îã§Ïù¥ÏñºÎ°úÍ∑∏
	public static void showDialogWithBothLists(JFrame parent, String dateKey, List<ToDo> localList,
			List<SharedToDo> sharedList) {
		JDialog dialog = new JDialog(parent);
		dialog.setTitle("üìÖ " + dateKey + " ÏùºÏ†ï");
		dialog.setSize(650, 500);
		dialog.setLocationRelativeTo(parent);
		dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		dialog.getContentPane().setBackground(Color.WHITE);

		JPanel mainPanel = new JPanel();
		mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
		mainPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
		mainPanel.setBackground(Color.WHITE);

		// Ìó§Îçî
		JLabel dayLabel = new JLabel(dateKey + " ÏùºÏ†ï Î™©Î°ù");
		dayLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 22));
		dayLabel.setForeground(new Color(33, 37, 41));
		dayLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
		mainPanel.add(dayLabel);
		mainPanel.add(Box.createVerticalStrut(15));

		JSeparator headerSep = new JSeparator();
		headerSep.setForeground(new Color(206, 212, 218));
		mainPanel.add(headerSep);
		mainPanel.add(Box.createVerticalStrut(15));

		// Î°úÏª¨ ÏùºÏ†ï ÌëúÏãú
		if (localList != null && !localList.isEmpty()) {
			JLabel localLabel = new JLabel("üè† ÎÇ¥ ÏùºÏ†ï");
			localLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 16));
			localLabel.setForeground(PRIMARY_COLOR);
			mainPanel.add(localLabel);
			mainPanel.add(Box.createVerticalStrut(10));

			for (int i = 0; i < localList.size(); i++) {
				ToDo todo = localList.get(i);
				int index = i;
				mainPanel.add(createLocalTodoPanel(dialog, parent, todo, localList, index, dateKey));
				mainPanel.add(Box.createVerticalStrut(10));
			}
		}

		// Í≥µÏú† ÏùºÏ†ï ÌëúÏãú
		if (sharedList != null && !sharedList.isEmpty()) {
			if (localList != null && !localList.isEmpty()) {
				mainPanel.add(Box.createVerticalStrut(15));
			}

			JLabel sharedLabel = new JLabel("üåê Í≥µÏú† ÏùºÏ†ï");
			sharedLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 16));
			sharedLabel.setForeground(SHARED_COLOR.darker());
			mainPanel.add(sharedLabel);
			mainPanel.add(Box.createVerticalStrut(10));

			for (SharedToDo sharedTodo : sharedList) {
				mainPanel.add(createSharedTodoPanelWithEdit(dialog, parent, sharedTodo, dateKey));
				mainPanel.add(Box.createVerticalStrut(10));
			}
		}

		// ÏùºÏ†ïÏù¥ ÏóÜÎäî Í≤ΩÏö∞
		if ((localList == null || localList.isEmpty()) && (sharedList == null || sharedList.isEmpty())) {
			JLabel emptyLabel = new JLabel("Îì±Î°ùÎêú ÏùºÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§.");
			emptyLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 16));
			emptyLabel.setForeground(new Color(108, 117, 125));
			emptyLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
			mainPanel.add(emptyLabel);
		}

		mainPanel.add(Box.createVerticalGlue());

		// Îã´Í∏∞ Î≤ÑÌäº
		JPanel closePanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
		closePanel.setBackground(Color.WHITE);
		JButton closeButton = new JButton("Îã´Í∏∞");
		closeButton.setBackground(new Color(108, 117, 125));
		closeButton.setForeground(Color.WHITE);
		closeButton.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 14));
		closeButton.setBorder(new EmptyBorder(10, 20, 10, 20));
		closeButton.setFocusPainted(false);
		closeButton.addActionListener(e -> dialog.dispose());
		closePanel.add(closeButton);
		// Îß•ÏóêÏÑúÎèÑ Î≤ÑÌäº Î≥¥Ïù¥ÎèÑÎ°ù
		closeButton.setContentAreaFilled(true);
		closeButton.setOpaque(true);
		closeButton.setBorderPainted(true);

		mainPanel.add(closePanel);

		JScrollPane scrollPane = new JScrollPane(mainPanel);
		scrollPane.setBorder(null);
		dialog.add(scrollPane);
		dialog.setVisible(true);
	}

	// Î°úÏª¨ ÏùºÏ†ï Ìå®ÎÑê ÏÉùÏÑ±
	private static JPanel createLocalTodoPanel(JDialog dialog, JFrame parent, ToDo todo, List<ToDo> list, int index,
			String dateKey) {
		JPanel rowPanel = new JPanel(new BorderLayout());
		rowPanel.setBackground(new Color(248, 249, 250));
		rowPanel.setBorder(BorderFactory.createCompoundBorder(
				BorderFactory.createLineBorder(new Color(206, 212, 218), 1),
				new EmptyBorder(15, 15, 15, 15)));
		rowPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
		rowPanel.setMaximumSize(new Dimension(460, 80));

		// ÏùºÏ†ï Ï†ïÎ≥¥
		JPanel infoPanel = new JPanel();
		infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));
		infoPanel.setBackground(new Color(248, 249, 250));

		JLabel nameLabel = new JLabel(todo.getTaskName());
		nameLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 16));
		nameLabel.setForeground(new Color(33, 37, 41));

		String timeInfo = String.format("%02d:%02d - %02d:%02d",
				todo.getStartHour(), todo.getStartMinute(),
				todo.getEndHour(), todo.getEndMinute());
		JLabel timeLabel = new JLabel("üïê " + timeInfo);
		timeLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 12));
		timeLabel.setForeground(new Color(108, 117, 125));

		if (!todo.getLocation().isEmpty()) {
			JLabel locationLabel = new JLabel("üìç " + todo.getLocation());
			locationLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 12));
			locationLabel.setForeground(new Color(108, 117, 125));
			infoPanel.add(locationLabel);
		}

		infoPanel.add(nameLabel);
		infoPanel.add(timeLabel);

		// Î≤ÑÌäº Ìå®ÎÑê
		JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 5, 0));
		buttonPanel.setBackground(new Color(248, 249, 250));

		JButton editButton = new JButton("ÏàòÏ†ï");
		styleSmallButton(editButton, new Color(64, 128, 255));
		// Îß•ÏóêÏÑúÎèÑ Î≤ÑÌäº Î≥¥Ïù¥ÎèÑÎ°ù
		editButton.setContentAreaFilled(true);
		editButton.setOpaque(true);
		editButton.setBorderPainted(true);

		JButton deleteButton = new JButton("ÏÇ≠Ï†ú");
		styleSmallButton(deleteButton, new Color(220, 53, 69));
		// Îß•ÏóêÏÑúÎèÑ Î≤ÑÌäº Î≥¥Ïù¥ÎèÑÎ°ù
		deleteButton.setContentAreaFilled(true);
		deleteButton.setOpaque(true);
		deleteButton.setBorderPainted(true);

		// Î≤ÑÌäº Ïù¥Î≤§Ìä∏
		editButton.addActionListener(e -> {
			dialog.dispose();
			if (parent instanceof OurCalendar) {
				OurCalendar calendar = (OurCalendar) parent;
				ToDoForm editForm = new ToDoForm(
						todo.getStartYear(),
						todo.getStartMonth(),
						todo.getStartDay(),
						calendar,
						todo);
				editForm.showList();
			}
		});

		deleteButton.addActionListener(e -> {
			int confirm = JOptionPane.showConfirmDialog(dialog,
					"Ï†ïÎßêÎ°ú ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?", "ÏÇ≠Ï†ú ÌôïÏù∏",
					JOptionPane.YES_NO_OPTION,
					JOptionPane.QUESTION_MESSAGE);
			if (confirm == JOptionPane.YES_OPTION) {
				list.remove(index);
				OurCalendar calObj = (OurCalendar) parent;
				calObj.saveFile();
				dialog.dispose();
				calObj.updateCal(false);

				JOptionPane.showMessageDialog(parent,
						"ÏùºÏ†ïÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.", "ÏÇ≠Ï†ú ÏôÑÎ£å",
						JOptionPane.INFORMATION_MESSAGE);

				// ÎÇ®ÏùÄ ÏùºÏ†ïÏù¥ ÏûàÏúºÎ©¥ Îã§Ïãú ÌëúÏãú
				List<SharedToDo> remainingShared = calObj.sharedTasks.get(dateKey);
				if (!list.isEmpty() || (remainingShared != null && !remainingShared.isEmpty())) {
					showDialogWithBothLists(parent, dateKey, list, remainingShared);
				}
			}
		});

		buttonPanel.add(editButton);
		buttonPanel.add(deleteButton);

		rowPanel.add(infoPanel, BorderLayout.CENTER);
		rowPanel.add(buttonPanel, BorderLayout.EAST);

		return rowPanel;
	}

	// Í≥µÏú† ÏùºÏ†ï Ìå®ÎÑê ÏÉùÏÑ± (ÏàòÏ†ï Í∞ÄÎä•)
	private static JPanel createSharedTodoPanel(SharedToDo sharedTodo) {
		JPanel rowPanel = new JPanel(new BorderLayout());
		rowPanel.setBackground(new Color(255, 248, 220)); // Í≥µÏú† ÏùºÏ†ï Î∞∞Í≤ΩÏÉâ
		rowPanel.setBorder(BorderFactory.createCompoundBorder(
				BorderFactory.createLineBorder(SHARED_COLOR, 2),
				new EmptyBorder(15, 15, 15, 15)));
		rowPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
		rowPanel.setMaximumSize(new Dimension(460, 80));

		// ÏùºÏ†ï Ï†ïÎ≥¥
		JPanel infoPanel = new JPanel();
		infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));
		infoPanel.setBackground(new Color(255, 248, 220));

		JLabel nameLabel = new JLabel(sharedTodo.getTaskName() + " (Í≥µÏú†)");
		nameLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 16));
		nameLabel.setForeground(new Color(33, 37, 41));

		String timeInfo = String.format("%02d:%02d - %02d:%02d",
				sharedTodo.getStartHour(), sharedTodo.getStartMinute(),
				sharedTodo.getEndHour(), sharedTodo.getEndMinute());
		JLabel timeLabel = new JLabel("üïê " + timeInfo);
		timeLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 12));
		timeLabel.setForeground(new Color(108, 117, 125));

		JLabel creatorLabel = new JLabel("üë§ " + sharedTodo.getCreator() + "ÎãòÏù¥ Í≥µÏú†");
		creatorLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 12));
		creatorLabel.setForeground(SHARED_COLOR.darker());

		if (!sharedTodo.getLocation().isEmpty()) {
			JLabel locationLabel = new JLabel("üìç " + sharedTodo.getLocation());
			locationLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 12));
			locationLabel.setForeground(new Color(108, 117, 125));
			infoPanel.add(locationLabel);
		}

		infoPanel.add(nameLabel);
		infoPanel.add(timeLabel);
		infoPanel.add(creatorLabel);

		rowPanel.add(infoPanel, BorderLayout.CENTER);

		return rowPanel;
	}

	// Í≥µÏú† ÏùºÏ†ï Ìå®ÎÑê ÏÉùÏÑ± (ÏàòÏ†ï Í∞ÄÎä•Ìïú Î≤ÑÏ†Ñ)
	private static JPanel createSharedTodoPanelWithEdit(JDialog dialog, JFrame parent, SharedToDo sharedTodo,
			String dateKey) {
		JPanel rowPanel = new JPanel(new BorderLayout());
		rowPanel.setBackground(new Color(255, 248, 220)); // Í≥µÏú† ÏùºÏ†ï Î∞∞Í≤ΩÏÉâ
		rowPanel.setBorder(BorderFactory.createCompoundBorder(
				BorderFactory.createLineBorder(SHARED_COLOR, 2),
				new EmptyBorder(15, 15, 15, 15)));
		rowPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
		rowPanel.setMaximumSize(new Dimension(460, 80));

		// ÏùºÏ†ï Ï†ïÎ≥¥
		JPanel infoPanel = new JPanel();
		infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));
		infoPanel.setBackground(new Color(255, 248, 220));

		JLabel nameLabel = new JLabel(sharedTodo.getTaskName() + " (Í≥µÏú†)");
		nameLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 16));
		nameLabel.setForeground(new Color(33, 37, 41));

		String timeInfo = String.format("%02d:%02d - %02d:%02d",
				sharedTodo.getStartHour(), sharedTodo.getStartMinute(),
				sharedTodo.getEndHour(), sharedTodo.getEndMinute());
		JLabel timeLabel = new JLabel("üïê " + timeInfo);
		timeLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 12));
		timeLabel.setForeground(new Color(108, 117, 125));

		JLabel creatorLabel = new JLabel("üë§ " + sharedTodo.getCreator() + "ÎãòÏù¥ Í≥µÏú†");
		creatorLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 12));
		creatorLabel.setForeground(SHARED_COLOR.darker());

		if (!sharedTodo.getLocation().isEmpty()) {
			JLabel locationLabel = new JLabel("üìç " + sharedTodo.getLocation());
			locationLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 12));
			locationLabel.setForeground(new Color(108, 117, 125));
			infoPanel.add(locationLabel);
		}

		infoPanel.add(nameLabel);
		infoPanel.add(timeLabel);
		infoPanel.add(creatorLabel);

		// Î≤ÑÌäº Ìå®ÎÑê (Î≥∏Ïù∏Ïù¥ ÎßåÎì† Í≥µÏú† ÏùºÏ†ïÎßå ÏàòÏ†ï/ÏÇ≠Ï†ú Í∞ÄÎä•)
		if (parent instanceof OurCalendar) {
			OurCalendar calendar = (OurCalendar) parent;
			if (sharedTodo.getCreator().equals(calendar.getNickname())) {
				JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 5, 0));
				buttonPanel.setBackground(new Color(255, 248, 220));

				JButton editButton = new JButton("ÏàòÏ†ï");
				styleSmallButton(editButton, SHARED_COLOR.darker());

				JButton deleteButton = new JButton("ÏÇ≠Ï†ú");
				styleSmallButton(deleteButton, new Color(220, 53, 69));

				editButton.addActionListener(e -> {
					dialog.dispose();
					ToDoForm editForm = new ToDoForm(
							sharedTodo.getStartYear(),
							sharedTodo.getStartMonth(),
							sharedTodo.getStartDay(),
							calendar,
							sharedTodo); // SharedToDoÎ•º ToDoÎ°ú Ï†ÑÎã¨
					editForm.setSharedTodo(sharedTodo); // ÏõêÎ≥∏ SharedToDo Ï†ïÎ≥¥ Î≥¥Í¥Ä
					editForm.showList();
				});

				deleteButton.addActionListener(e -> {
					int confirm = JOptionPane.showConfirmDialog(dialog,
							"Ï†ïÎßêÎ°ú ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÎ™®Îì† ÏÇ¨Ïö©ÏûêÏóêÍ≤åÏÑú ÏÇ≠Ï†úÎê©ÎãàÎã§.",
							"Í≥µÏú† ÏùºÏ†ï ÏÇ≠Ï†ú ÌôïÏù∏",
							JOptionPane.YES_NO_OPTION,
							JOptionPane.QUESTION_MESSAGE);
					if (confirm == JOptionPane.YES_OPTION) {
						// ÏÑúÎ≤ÑÎ°ú ÏÇ≠Ï†ú ÏöîÏ≤≠
						calendar.deleteSharedTask(sharedTodo.getId());

						// Î°úÏª¨ÏóêÏÑúÎèÑ Ï¶âÏãú ÏÇ≠Ï†ú
						calendar.deleteSharedTodo(sharedTodo.getId());

						dialog.dispose();

						JOptionPane.showMessageDialog(calendar,
								"Í≥µÏú† ÏùºÏ†ïÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.", "ÏÇ≠Ï†ú ÏôÑÎ£å",
								JOptionPane.INFORMATION_MESSAGE);

						// ÎÇ®ÏùÄ ÏùºÏ†ï ÏûàÏúºÎ©¥ Îã§Ïãú ÌëúÏãú
						List<ToDo> remainingLocal = calendar.tasks.get(dateKey);
						List<SharedToDo> remainingShared = calendar.sharedTasks.get(dateKey);
						if ((remainingLocal != null && !remainingLocal.isEmpty()) ||
								(remainingShared != null && !remainingShared.isEmpty())) {
							showDialogWithBothLists(calendar, dateKey, remainingLocal, remainingShared);
						}
					}
				});

				buttonPanel.add(editButton);
				buttonPanel.add(deleteButton);
				rowPanel.add(buttonPanel, BorderLayout.EAST);
			}
		}

		rowPanel.add(infoPanel, BorderLayout.CENTER);

		return rowPanel;
	}

	// ÏûëÏùÄ Î≤ÑÌäº Ïä§ÌÉÄÏùºÎßÅ
	private static void styleSmallButton(JButton button, Color bgColor) {
		button.setBackground(bgColor);
		button.setForeground(Color.WHITE);
		button.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 12));
		button.setBorder(new EmptyBorder(6, 12, 6, 12));
		button.setFocusPainted(false);
		button.setCursor(new Cursor(Cursor.HAND_CURSOR));

		button.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				button.setBackground(bgColor.darker());
			}

			@Override
			public void mouseExited(MouseEvent e) {
				button.setBackground(bgColor);
			}
		});
	}

	// ÌïÑÎìú Ï±ÑÏö∞Í∏∞
	private void populateFields(ToDo todo) {
		titleField.setText(todo.getTaskName());
		titleField.setForeground(Color.BLACK);

		locationField.setText(todo.getLocation());
		locationField.setForeground(Color.BLACK);

		checkBox.setSelected(todo.isAllDay());

		startYearLabel.setText(todo.getStartYear() + "ÎÖÑ");
		startMonthLabel.setText((todo.getStartMonth() + 1) + "Ïõî");
		startDayLabel.setText(todo.getStartDay() + "Ïùº");
		startHourLabel.setText(todo.getStartHour() + "Ïãú");
		startMinuteLabel.setText(todo.getStartMinute() + "Î∂Ñ");

		endYearLabel.setText(todo.getEndYear() + "ÎÖÑ");
		endMonthLabel.setText((todo.getEndMonth() + 1) + "Ïõî");
		endDayLabel.setText(todo.getEndDay() + "Ïùº");
		endHourLabel.setText(todo.getEndHour() + "Ïãú");
		endMinuteLabel.setText(todo.getEndMinute() + "Î∂Ñ");

		alarmCombo.setSelectedItem(todo.getAlarm());
		repeatCombo.setSelectedItem(todo.getRepeat());

		memoArea.setText(todo.getMemo());
		memoArea.setForeground(Color.BLACK);
	}
}